---
- name: Extract Certs on Broker
  import_role:
    name: ssl
    tasks_from: export_certs_from_keystore_and_truststore.yml
  vars:
    truststore_storepass: "{{ kafka_broker_truststore_storepass }}"
    truststore_path: "{{ kafka_broker_truststore_path }}"
    keystore_storepass: "{{ kafka_broker_keystore_storepass }}"
    keystore_path: "{{ kafka_broker_keystore_path }}"
    ca_cert_path: "{{ kafka_broker_ca_cert_path }}"
    cert_path: "{{ kafka_broker_cert_path }}"
    key_path: "{{ kafka_broker_key_path }}"
  when:
    - ssl_provided_keystore_and_truststore|bool
    - ssl_client_authentication in ['required', 'requested']
  delegate_to: "{{ groups['kafka_broker'][0] }}"

- name: Get Kafka Cluster Id
  import_role:
    name: common
    tasks_from: rbac_setup.yml
  when: rbac_enabled
  vars:
    copy_certs: false
  delegate_to: "{{ groups['kafka_broker'][0] }}"

- name: Delete temporary keys/certs when keystore and trustore is provided
  file:
    path: "{{item}}"
    state: absent
  loop:
    - "{{ kafka_broker_ca_cert_path }}"
    - "{{ kafka_broker_cert_path }}"
    - "{{ kafka_broker_key_path }}"
  when:
    - ssl_provided_keystore_and_truststore|bool
    - ssl_client_authentication in ['required', 'requested']
  delegate_to: "{{ groups['kafka_broker'][0] }}"

- name: Fetch Kafka Connect Cluster Groups
  set_fact:
    active_kafka_connect_groups: "{{ (((active_kafka_connect_groups | default([])) + hostvars[item].group_names) | difference('kafka_connect'+'kafka_connect_parallel'+'kafka_connect_serial'+ 'kafka_broker'+ 'kafka_broker_parallel'+'kafka_broker_serial'+'ksql'+ 'ksql_parallel'+'ksql_serial'+'control_center'+'control_center_parallel'+'control_center_serial'+'schema_registry'+'zookeeper'+'zookeeper_parallel'+'zookeeper_serial'+'kafka_rest'+'kafka_rest_parallel'+'kafka_rest_serial'+'kafka_controller'+'kafka_controller_parallel'+'kafka_controller_serial')) | default(['kafka_connect'], true) }}"
  with_items: "{{ ansible_play_hosts }}"

- name: Register Kafka Connect Cluster
  vars:
    cluster_host_delegates: "{{ active_kafka_connect_groups | map('extract', groups, 0)| list }}"
    cluster_group: "{{ hostvars[item].parent_kafka_connect_cluster_group }}"
    cluster_name: "{{ hostvars[item].kafka_connect_cluster_name }}"
    cluster_id: "{{ hostvars[item].parent_kafka_connect_cluster_id }}"
  uri:
    url: "{{mds_bootstrap_server_urls.split(',')[0]}}/security/1.0/registry/clusters"
    method: POST
    validate_certs: false
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ authorization_token }}"
    client_cert: "{{ kafka_connect_cert_path if send_client_cert|bool else omit }}"
    client_key: "{{ kafka_connect_key_path if send_client_cert|bool else omit }}"
    body_format: json
    body: >
      [
          {
              "clusterName": "{{cluster_name}}",
              "scope": {
                  "clusters": {
                      "kafka-cluster": "{{kafka_cluster_id}}",
                      "connect-cluster": "{{cluster_id}}"
                  }
              },
              "hosts": [ {% for inv_host in groups[cluster_group] %}{% if loop.index > 1%},{% endif %}{ "host": "{{hostvars[inv_host]|confluent.platform.resolve_hostname}}", "port": {% if hostvars[inv_host].kafka_connect_rest_port is defined %} {{hostvars[inv_host].kafka_connect_rest_port}} {% else %} {{kafka_connect_rest_port}} {% endif %} }{% endfor %} ],
              "protocol": "{{kafka_connect_http_protocol | upper}}"
          }
      ]
    status_code: 204
  register: output
  until: output.status == 204
  retries: "{{ mds_retries }}"
  delay: 10
  when:
    - hostvars[item].get("rbac_enabled", false)|bool
    - hostvars[item].kafka_connect_cluster_name is defined
    - hostvars[item].parent_kafka_connect_cluster_id is defined
  with_items: "{{ cluster_host_delegates }}"
